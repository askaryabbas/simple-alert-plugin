name: Coding Standards

on:
  # JSHint was introduced in WordPress 3.8.
  # PHPCS checking was introduced in WordPress 5.1.
  pull_request:
    branches:
      - master
    paths:
      # Any change to a PHP or JavaScript file should run checks.
      - '**.js'
      - '**.php'
      # These files configure NPM. Changes could affect the outcome.
      - 'package*.json'
      # These files configure Composer. Changes could affect the outcome.
      - 'composer.*'
      # This file configures JSHint. Changes could affect the outcome.
      - '.jshintrc'
      # This file configures PHPCS. Changes could affect the outcome.
      - 'phpcs.xml.dist'
      # Changes to workflow files should always verify all workflows are successful.
      - '.github/workflows/*.yml'

jobs:
  # Runs PHP coding standards checks.
  #
  # Violations are reported inline with annotations.
  #
  # Performs the following steps:
  # - Checks out the repository.
  # - Sets up PHP.
  # - Logs debug information.
  # - Configures caching for PHPCS scans.
  # - Installs Composer dependencies (use cache if possible).
  # - Make Composer packages available globally.
  # - Logs PHP_CodeSniffer debug information.
  # - Runs PHPCS on the full codebase with warnings suppressed.
  # - Runs PHPCS on the `tests` directory without warnings suppressed.
  # - Ensures version-controlled files are not modified or deleted.
  phpcs:
    name: PHP coding standards
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: ${{ github.repository == 'WordPress/wordpress-develop' || github.event_name == 'pull_request' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579 # v2.4.0

      - name: Set up PHP
        uses: shivammathur/setup-php@d37cc3048580de06099c81ded417530716a0d7ab # v2.18.0
        with:
          php-version: '7.4'
          coverage: none
          tools: composer, cs2pr

      - name: Log debug information
        run: |
          php --version
          composer --version

      # This date is used to ensure that the PHPCS cache is cleared at least once every week.
      # http://man7.org/linux/man-pages/man1/date.1.html
      - name: "Get last Monday's date"
        id: get-date
        run: echo "::set-output name=date::$(/bin/date -u --date='last Mon' "+%F")"

      - name: Cache PHPCS scan cache
        uses: actions/cache@136d96b4aee02b1f0de3ba493b1d47135042d9c0 # v3.0.1
        with:
          path: .cache/phpcs.json
          key: ${{ runner.os }}-date-${{ steps.get-date.outputs.date }}-phpcs-cache-${{ hashFiles('**/composer.json', 'phpcs.xml.dist') }}

      - name: Install Composer dependencies
        uses: ramsey/composer-install@f680dac46551dffb2234a240d65ae806c2999dd6 # v2.1.0
        with:
          composer-options: "--no-progress --no-ansi --no-interaction"

      - name: Make Composer packages available globally
        run: echo "${PWD}/vendor/bin" >> $GITHUB_PATH

      - name: Log PHPCS debug information
        run: phpcs -i

      - name: Run PHPCS on all Core files
        run: phpcs -q -n --report=checkstyle | cs2pr

      - name: Check test suite files for warnings
        run: phpcs tests -q --report=checkstyle | cs2pr

      - name: Ensure version-controlled files are not modified during the tests
        run: git diff --exit-code

  # Runs the JavaScript coding standards checks.
  #
  # JSHint violations are not currently reported inline with annotations.
  #
  # Performs the following steps:
  # - Checks out the repository.
  # - Logs debug information about the runner container.
  # - Installs NodeJS 14.
  # - Logs updated debug information.
  # _ Installs NPM dependencies using install-changed to hash the `package.json` file.
  # - Run the WordPress JSHint checks.
  # - Ensures version-controlled files are not modified or deleted.
  jshint:
    name: JavaScript coding standards
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: ${{ github.repository == 'WordPress/wordpress-develop' || github.event_name == 'pull_request' }}
    env:
      PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: ${{ true }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579 # v2.4.0

      - name: Log debug information
        run: |
          npm --version
          node --version
          git --version
          svn --version

      - name: Install NodeJS
        uses: actions/setup-node@5b52f097d36d4b0b2f94ed6de710023fbb8b2236 # v3.1.0
        with:
          node-version-file: '.nvmrc'
          cache: npm

      - name: Log debug information
        run: |
          npm --version
          node --version

      - name: Install Dependencies
        run: npm ci

      - name: Run JSHint
        run: npm run grunt jshint

      - name: Ensure version-controlled files are not modified or deleted
        run: git diff --exit-code
